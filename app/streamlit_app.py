import logging
import os
import re
import sys

import matplotlib.pyplot as plt
import pandas as pd
import sentry_sdk
import streamlit as st
from dotenv import load_dotenv
from sentry_sdk.integrations.logging import LoggingIntegration

# 1) –ü—É—Ç—å –∏ .env
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
load_dotenv()

# 2) Sentry
sentry_logging = LoggingIntegration(level=logging.INFO, event_level=logging.ERROR)
sentry_sdk.init(
    dsn=os.getenv("SENTRY_DSN", ""),
    environment=os.getenv("ENV", "dev"),
    integrations=[sentry_logging],
    traces_sample_rate=0.1,
)

# 3) –ò–º–ø–æ—Ä—Ç—ã ML-—Å–ª–æ—è
from src.db.models import Profile
from src.db.session import SessionLocal, init_db

# 4) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
from src.logging_config import get_logger, setup_logging
from src.models.predict import FEATURE_NAMES, load_model
from src.parser.parser import get_users_info
from src.preprocessing.process_data import clean_and_feature_engineer

setup_logging(os.getenv("LOG_LEVEL", "INFO"))
logger = get_logger(__name__)

# 5) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–¥–ª—è dev/tests), –≤ –ø—Ä–æ–¥–µ —á–µ—Ä–µ–∑ Alembic
init_db()

# 6) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–≥–µ–Ω—Ç–Ω–æ—Å—Ç—å VK",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ===== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è + VK_TOKEN =====
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
if "vk_token" not in st.session_state:
    st.session_state.vk_token = os.getenv("VK_TOKEN", "")

if not st.session_state.authenticated:
    st.title("üîê –í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    with st.form("login_form"):
        pwd = st.text_input("–ü–∞—Ä–æ–ª—å:", type="password")
        vk = st.text_input(
            "VK_TOKEN:",
            type="password",
            value=st.session_state.vk_token,
            help="–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω VK API",
        )
        submit = st.form_submit_button("–í–æ–π—Ç–∏")
        if submit:
            if pwd == os.getenv("STREAMLIT_PASSWORD", "secret"):
                st.session_state.authenticated = True
                st.session_state.vk_token = vk
                os.environ["VK_TOKEN"] = vk
                st.success("–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    st.stop()

st.sidebar.success("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")

# ===== –ü–æ—Ä–æ–≥ =====
threshold = st.sidebar.slider(
    "–ü–æ—Ä–æ–≥ P(–∞–≥–µ–Ω—Ç–Ω–æ—Å—Ç–∏)", 0.0, 1.0, float(os.getenv("DEFAULT_THRESHOLD", 0.754)), 0.01
)

# ===== –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤–≤–æ–¥ =====
st.title("üïµÔ∏è –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≥–µ–Ω—Ç–Ω–æ—Å—Ç—å VK")
st.markdown("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ URL VK (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ):")
input_text = st.text_area("ID –∏–ª–∏ URL VK:", height=120)


def extract_vk_id(s: str) -> str:
    s = s.strip()
    m = re.search(r"vk\.com/([A-Za-z0-9_]+)", s)
    return m.group(1) if m else s


# ===== –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ =====
@st.cache_data(ttl=600)
def get_users_info_cached(ids: list[str]) -> list[dict]:
    logger.info("–ó–∞–ø—Ä–æ—Å %d –ø—Ä–æ—Ñ–∏–ª–µ–π VK", len(ids))
    return get_users_info(ids)


@st.cache_resource
def load_model_cached():
    logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å")
    return load_model()


# ===== –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ =====
results = []
if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"):
    ids = [extract_vk_id(link) for link in input_text.splitlines() if link.strip()]
    if not ids:
        st.error("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID –∏–ª–∏ URL")
    else:
        progress = st.progress(0)
        try:
            with st.spinner("–°—á–∏—Ç–∞–µ–º..."):
                feats_list = get_users_info_cached(ids)
                model = load_model_cached()

                for i, user in enumerate(feats_list):
                    uid = user.get("id", ids[i])
                    progress.progress((i + 1) / len(ids))

                    # 1) –û—à–∏–±–æ—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                    if user.get("__error"):
                        results.append({"user_id": uid, "error": True})
                        continue
                    # 2) –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    df = pd.DataFrame([user])
                    X = clean_and_feature_engineer(df)
                    X = X.reindex(columns=FEATURE_NAMES, fill_value=0)
                    proba = model.predict_proba(X)[0, 1]
                    label = int(proba >= threshold)
                    results.append(
                        {"user_id": uid, "proba": proba, "label": label, "error": False}
                    )

                st.success("–ì–æ—Ç–æ–≤–æ")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏")
            st.error(f"–û—à–∏–±–∫–∞: {e}")
# ===== –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ =====
if results:
    st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    df_res = pd.DataFrame(results)

    for _, row in df_res.iterrows():
        uid = row["user_id"]
        if row.get("error", False):
            st.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´{uid}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            continue

        proba = row["proba"]
        label = row["label"]

        # –°—Å—ã–ª–∫–∞
        st.markdown(f"üîó vk.com/{uid}")

        # –¶–≤–µ—Ç–Ω–æ–π –±–ª–æ–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ + –º–µ—Ç–∫–∞
        col1, col2 = st.columns(2)
        col1.markdown(
            f"""<div style='padding: 8px; 
            border-radius: 6px; 
            background-color: """  # noqa: E702
            f"{'#e2f8e8' if label else '#fde2e2'}; '>"  # noqa: E702
            f"""<h2 style='margin: 0; 
            color: {'#006b2c' if label else '#a12a2a'}'>"""  # noqa: E702
            f"{proba: .1%}"
            f"</h2></div>",
            unsafe_allow_html=True,
        )
        col2.metric("–ú–µ—Ç–∫–∞", "–ê–≥–µ–Ω—Ç–Ω—ã–π" if label else "–ù–ï –∞–≥–µ–Ω—Ç–Ω—ã–π")

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        a1, a2 = st.columns(2)
        if a1.button("–°–æ–≥–ª–∞—Å–µ–Ω", key=f"ok_{uid}"):
            manual = True
        elif a2.button("–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", key=f"no_{uid}"):
            manual = False
        else:
            manual = None

        if manual is not None:
            db = SessionLocal()
            prof = db.query(Profile).filter_by(user_id=uid).first()
            if not prof:
                prof = Profile(
                    user_id=uid, features=row.get("features", {}), label=manual
                )
                db.add(prof)
            else:
                prof.label = manual
            db.commit()
            db.close()
            st.success(f"–ú–µ—Ç–∫–∞ –¥–ª—è {uid} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {manual}")

        st.divider()

    # –≠–∫—Å–ø–æ—Ä—Ç CSV
    valid = df_res[~df_res["error"]].drop(columns=["error"], errors="ignore")
    st.download_button("–°–∫–∞—á–∞—Ç—å CSV", valid.to_csv(index=False), "results.csv")

    # –¢–æ–ø-3 –ø—Ä–∏–∑–Ω–∞–∫–∞
    with st.expander("–¢–æ–ø-5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"):
        imps = dict(zip(FEATURE_NAMES, load_model_cached().feature_importances_))
        top3 = sorted(imps.items(), key=lambda x: x[1], reverse=True)[1:6]
        df_imp = pd.DataFrame(top3, columns=["–ü—Ä–∏–∑–Ω–∞–∫", "–í–∞–∂–Ω–æ—Å—Ç—å"])
        st.table(df_imp)
        fig, ax = plt.subplots()
        ax.bar(df_imp["–ü—Ä–∏–∑–Ω–∞–∫"], df_imp["–í–∞–∂–Ω–æ—Å—Ç—å"])
        ax.set_title("–¢–æ–ø-5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        st.pyplot(fig, use_container_width=True)

    # –ò—Å—Ç–æ—Ä–∏—è
    with st.expander("–ò—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)"):
        n = st.slider("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö", 1, 50, 10)
        db = SessionLocal()
        hist = db.query(Profile).order_by(Profile.created_at.desc()).limit(n).all()
        db.close()
        if hist:
            df_h = pd.DataFrame(
                [
                    {
                        "user_id": p.user_id,
                        "–º–µ—Ç–∫–∞": "–ê–≥–µ–Ω—Ç–Ω—ã–π" if p.label else "–ù–ï –∞–≥–µ–Ω—Ç–Ω—ã–π",
                        "–¥–∞—Ç–∞": p.created_at.strftime("%Y-%m-%d %H:%M:%S"),
                    }
                    for p in hist
                ]
            )
            st.table(df_h)
        else:
            st.info("–ù–µ—Ç –º–µ—Ç–æ–∫")

# ===== –§–æ–Ω–æ–≤–æ–π retrain =====
if results and st.button("Re-train –º–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å"):
    from src.tasks.retrain_task import retrain_model

    retrain_model.delay()
    st.info("–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
