import logging
import os
import re
import sys

import matplotlib.pyplot as plt
import pandas as pd
import streamlit as st

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç—ã –∏–∑ src —Ä–∞–±–æ—Ç–∞–ª–∏
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sentry (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
import sentry_sdk
from sentry_sdk.integrations.logging import LoggingIntegration

sentry_logging = LoggingIntegration(
    level=logging.INFO,  # —Å–æ–±–∏—Ä–∞–µ–º INFO+ –∫–∞–∫ breadcrumbs
    event_level=logging.ERROR,  # –æ—à–∏–±–∫–∏ ERROR+ –≤ Sentry
)
sentry_sdk.init(
    dsn=os.getenv("SENTRY_DSN"),
    environment=os.getenv("ENV", "dev"),
    integrations=[sentry_logging],
    traces_sample_rate=0.1,
)

# –í–∞—à–∏ –∏–º–ø–æ—Ä—Ç—ã
from src.db.models import Profile
from src.db.session import SessionLocal, init_db
from src.logging_config import get_logger, setup_logging
from src.models.predict import FEATURE_NAMES, THRESHOLD, load_model, predict_one
from src.parser.parser import get_users_info
from src.tasks.retrain_task import retrain_model

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ë–î
setup_logging(os.getenv("LOG_LEVEL", "DEBUG"))
logger = get_logger(__name__)
init_db()  # –ø–æ–∫–∞ –µ—â—ë –∏—Å–ø–æ–ª—å–∑—É–µ–º init_db, –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ

# ===== –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è =====
PASSWORD = os.getenv("STREAMLIT_PASSWORD", "secret")
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    st.title("üîê –í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    pwd = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        if pwd == PASSWORD:
            st.session_state.authenticated = True
            st.experimental_rerun()
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    st.stop()

# ===== –û—Å–Ω–æ–≤–Ω–æ–π UI =====
st.title("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é VK")
st.markdown(
    "–í–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ URL –µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã VK\n"
    "‚Äî –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ)."
)

input_text = st.text_area(
    "ID –∏–ª–∏ URL VK (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å):",
    height=120,
)


def extract_vk_id(s: str) -> str:
    """–ò–∑ —Å—Ç—Ä–æ–∫–∏ https://vk.com/‚Ä¶ –¥–æ—Å—Ç–∞—ë—Ç id –∏–ª–∏ screen_name."""
    s = s.strip()
    m = re.search(r"vk\.com/([A-Za-z0-9_]+)", s)
    return m.group(1) if m else s


# ===== –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ =====
@st.cache_data(ttl=3600)
def get_users_info_cached(user_ids: list[str]) -> list[dict]:
    logger.info("Caching VK API call for %d users", len(user_ids))
    return get_users_info(user_ids)


@st.cache_resource
def load_model_cached():
    logger.info("Loading model from disk")
    return load_model()


# ===== –ö–Ω–æ–ø–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ =====
if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö"):
    logger.info("Button '–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö' clicked.")
    raw_lines = input_text.splitlines()
    user_ids = [extract_vk_id(line) for line in raw_lines if line.strip()]
    logger.debug("Extracted IDs: %s", user_ids)

    if not user_ids:
        msg = "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID –∏–ª–∏ —Å—Å—ã–ª–∫—É."
        logger.warning(msg)
        st.error(msg)
    else:
        try:
            with st.spinner("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ —Å—á–∏—Ç–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏..."):
                logger.info("Fetching user info for %d users", len(user_ids))
                features_list = get_users_info_cached(user_ids)
                logger.info("Fetched %d profiles", len(features_list))

                model = load_model_cached()
                results = []
                for uid, feats in zip(user_ids, features_list):
                    logger.debug("Predicting for %s", uid)
                    proba, label = predict_one(feats)
                    results.append((uid, feats, proba, label))
        except Exception as e:
            logger.exception("Error during fetch/predict")
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        else:
            db = SessionLocal()
            for uid, feats, proba, label in results:
                st.markdown("---")
                st.markdown(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ** {uid}")
                st.markdown(f"- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–Ω–æ—Å—Ç–∏: **{proba: .1%}**")

                st.markdown(
                    f"- Predicted: {'–î–∞' if label else '–ù–µ—Ç'} _(threshold={THRESHOLD})_"
                )

                col1, col2 = st.columns(2)
                if col1.button("–°–æ–≥–ª–∞—Å–µ–Ω", key=f"ok_{uid}"):
                    manual = True
                elif col2.button("–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", key=f"no_{uid}"):
                    manual = False
                else:
                    manual = None

                if manual is not None:
                    try:
                        logger.info("Saving manual label %s for %s", manual, uid)
                        prof = db.query(Profile).filter_by(user_id=uid).first()
                        if not prof:
                            prof = Profile(user_id=uid, features=feats, label=manual)
                            db.add(prof)
                        else:
                            prof.features = feats
                            prof.label = manual
                        db.commit()
                        st.success(f"–ú–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è {uid}!")
                        retrain_model.delay()
                    except Exception as e:
                        logger.exception("Failed to save label for %s", uid)
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∫—É: {e}")

            db.close()

            # ===== –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ =====
            st.markdown("### –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            importances = model.feature_importances_
            fig, ax = plt.subplots()
            ax.bar(range(len(FEATURE_NAMES)), importances)
            ax.set_xticks(range(len(FEATURE_NAMES)))
            ax.set_xticklabels(FEATURE_NAMES, rotation=90, fontsize=8)
            ax.set_ylabel("Importance")
            st.pyplot(fig, use_container_width=True)

            # ===== –ò—Å—Ç–æ—Ä–∏—è –∏–∑ –±–∞–∑—ã =====
            st.markdown("### –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
            db = SessionLocal()
            recent = (
                db.query(Profile).order_by(Profile.created_at.desc()).limit(10).all()
            )
            db.close()
            if recent:
                hist_df = pd.DataFrame(
                    [
                        {
                            "user_id": p.user_id,
                            "label": p.label,
                            "created_at": p.created_at.strftime("%Y-%m-%d %H:%M:%S"),
                        }
                        for p in recent
                    ]
                )
                st.dataframe(hist_df, use_container_width=True)
            else:
                st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")
